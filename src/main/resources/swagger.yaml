openapi: 3.0.1
info:
  title: Appointment Management API
  version: "1.0"
tags:
  - name: "Appointment Management"
    description: "API для управления записями на приём к врачам"
  - name: "Doctor Management"
    description: "API для управления врачами"
  - name: "Patient Management"
    description: "API для управления пациентами"

paths:
  /api/v1/appointments:
    post:
      tags:
        - "Appointment Management"
      summary: "Создать новую запись"
      operationId: "createAppointment"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentCreateDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentResponseDto"
  /api/v1/appointments/doctor/{doctorId}:
    get:
      tags:
        - "Appointment Management"
      summary: "Получить записи по ID врача"
      operationId: "getAppointmentsByDoctorId"
      parameters:
        - name: "doctorId"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppointmentResponseDto"

  /api/v1/appointments/patient/{patientId}:
    get:
      tags:
        - "Appointment Management"
      summary: "Получить записи по ID пациента"
      operationId: "getAppointmentsByPatientId"
      parameters:
        - name: "patientId"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppointmentResponseDto"

  /api/v1/appointments/{id}:
    get:
      tags:
        - "Appointment Management"
      summary: "Получить запись по ID"
      operationId: "getAppointmentById"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentResponseDto"
        "404":
          description: "Запись не найдена"
    put:
      tags:
        - "Appointment Management"
      summary: "Обновить запись"
      operationId: "updateAppointment"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentCreateDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppointmentResponseDto"
        "404":
          description: "Запись не найдена"
    delete:
      tags:
        - "Appointment Management"
      summary: "Удалить запись"
      operationId: "deleteAppointment"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: "Запись успешно удалена"
        "404":
          description: "Запись не найдена"
  /api/v1/doctor:
    get:
      tags:
        - "Doctor Management"
      summary: "Получить список всех врачей"
      operationId: "getAllDoctors"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DoctorResponseDto"
    post:
      tags:
        - "Doctor Management"
      summary: "Создать нового врача"
      operationId: "createDoctor"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoctorCreateDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseDto"

  /api/v1/doctor/{id}:
    get:
      tags:
        - "Doctor Management"
      summary: "Получить врача по ID"
      operationId: "getDoctorById"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseDto"
        "404":
          description: "Врач не найден"
    put:
      tags:
        - "Doctor Management"
      summary: "Обновить информацию о враче"
      operationId: "updateDoctor"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoctorCreateDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponseDto"
        "404":
          description: "Врач не найден"
    delete:
      tags:
        - "Doctor Management"
      summary: "Удалить врача"
      operationId: "deleteDoctor"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: "Врач успешно удалён"
        "404":
          description: "Врач не найден"
  /api/v1/patients:
    get:
      tags:
        - "Patient Management"
      summary: "Получить список всех пациентов"
      operationId: "getAllPatients"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PatientResponseDto"
    post:
      tags:
        - "Patient Management"
      summary: "Создать нового пациента"
      operationId: "createPatient"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientCreateDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientResponseDto"

  /api/v1/patients/{id}:
    get:
      tags:
        - "Patient Management"
      summary: "Получить пациента по ID"
      operationId: "getPatientById"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientResponseDto"
        "404":
          description: "Пациент не найден"
    put:
      tags:
        - "Patient Management"
      summary: "Обновить информацию о пациенте"
      operationId: "updatePatient"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientCreateDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientResponseDto"
        "404":
          description: "Пациент не найден"
    delete:
      tags:
        - "Patient Management"
      summary: "Удалить пациента"
      operationId: "deletePatient"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: "Пациент успешно удалён"
        "404":
          description: "Пациент не найден"

components:
  schemas:
    AppointmentCreateDto:
      type: object
      properties:
        doctor:
          type: string
          format: uuid
        patient:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
      required:
        - doctor
        - patient
        - date

    AppointmentResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8"
        doctor:
          type: string
          format: uuid
        patient:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
      required:
        - id
        - doctor
        - patient
        - date
    DoctorCreateDto:
      type: "object"
      properties:
        name:
          type: string
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        duration:
          type: string
          description: "Продолжительность в формате ISO 8601 (например, PT1H30M)"
        createdAt:
          type: string
          format: date-time
        cost:
          type: number
          format: decimal
      required:
        - name
        - startedAt
        - finishedAt
        - duration
        - createdAt
        - cost

    DoctorResponseDto:
      type: "object"
      properties:
        id:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8"
        name:
          type: string
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        duration:
          type: string
          description: "Продолжительность в формате ISO 8601 (например, PT1H30M)"
        createdAt:
          type: string
          format: date-time
        cost:
          type: number
          format: decimal
      required:
        - id
        - name
        - startedAt
        - finishedAt
        - duration
        - createdAt
        - cost
    PatientCreateDto:
      type: "object"
      properties:
        name:
          type: string
        email:
          type: string
          format: email
      required:
        - name
        - email

    PatientResponseDto:
      type: "object"
      properties:
        id:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8"
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
        - createdAt